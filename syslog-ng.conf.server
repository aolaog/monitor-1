# options
options {

          # Number of syslog lines stored in memory before being written to files
          flush_lines (0);

          # Syslog-ng uses queues
          log_fifo_size (1000);

          # Create log directories as needed
          create_dirs (yes);

          # Make the group "logs" own the log files and directories
          #group (logs);
          #dir_group (logs);

          # Set the file and directory permissions
          perm (0640);
          dir_perm (0750);

          # Check client hostnames for valid DNS characters
          check_hostname (no);

          # Specify whether to trust hostname in the log message.
          # If "yes", then it is left unchanged, if "no" the server replaces
          # it with client's DNS lookup value.
          keep_hostname (yes);

          # Use DNS fully qualified domain names (FQDN)
          # for the names of log file folders
          use_fqdn (no);
          use_dns (no);

          # Cache DNS entries for up to 1000 hosts for 12 hours
          #dns_cache (yes);
          #dns_cache_size (1000);
          #dns_cache_expire (43200);
        };


# Define all the sources of filter syslog messages and label it "f_message"
#Level 
#debug  -> info -> notice -> warning(=warn) -> error(=err) -> crit -> alert -> emerg(=panic)

#Facility 
# 0 kern, 1 user, 2 mail, 3 daemon, 4 auth, 5 syslog, 6 lpr, 7 news, 8 uucp, 9 cron, 10 auth, 11 ftp, 15 cron, 16-23 local0..local7

filter f_messages {
        level(info,notice,warn) and not facility(auth,authpriv,cron,daemon,mail,news);
};


# Define all the sources of localhost generated syslog messages and label it "d_localhost"
source s_localhost {
        # message generated by Syslog-NG
        internal();
        # standard Linux log source (this is the default place for the syslog()
        # function to send logs to)
        unix-stream("/dev/log");
        # messages from the kernel
        file("/proc/kmsg" log_prefix("kernel: "));
        # use the following line if you want to receive remote UDP logging messages
        # (this is equivalent to the "-r" syslogd flag)
        # udp();
};


# Define all the sources of network generated syslog messages and label it "d_network"
source s_network {
          tcp(max-connections(5000));
	  udp();
};

# Define all the sources of filter syslog messages and label it "f_message"
#Level 
#debug  -> info -> notice -> warning(=warn) -> error(=err) -> crit -> alert -> emerg(=panic)

#Facility 
# 0 kern, 1 user, 2 mail, 3 daemon, 4 auth, 5 syslog, 6 lpr, 7 news, 8 uucp, 9 cron, 10 auth, 11 ftp, 15 cron, 16-23 local0..local7

filter f_messages {
        level(info,notice,warn) and facility(auth,authpriv,cron,daemon,syslog);
};

# Define the destination "d_network" log directory
destination d_network {
          file ("/var/log/syslog-ng/$YEAR.$MONTH.$DAY/$HOST/$FACILITY.log");
};

# Create destination to Mysql
destination d_mysql {
		program("/usr/bin/mysql --user=syslogadmin --password=zoomi-init syslog"
		template("INSERT INTO logs (host, facility, priority, level, tag, datetime, program, msg)
		VALUES ( '$HOST', '$FACILITY', '$PRIORITY', '$LEVEL', '$TAG', '$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC', '$PROGRAM', '$MSG' );\n")
		template-escape(yes));
};

destination d_localhost {
           file ("/var/log/syslog-ng/$YEAR.$MONTH.$DAY/$HOST/$FACILITY.log");
};

# Any logs that match the "s_localhost" source should be logged in the "d_mysql" database
log { 
	source(s_localhost);
      	filter(f_messages);
	destination(d_mysql);
};

# Any logs that match the "s_network" source should be logged in the "d_mysql" database

log { 
       	source(s_network);
	filter(f_messages);
       	destination(d_mysql);
};


# Any logs that match the "s_localhost" source should be logged in the "d_localhost" directory
#log {  
#        source(s_localhost);
#        filter(f_messages);
#        destination(d_localhost);
#};

# Any logs that match the "s_network" source should be logged in the "d_network" directory
#log {  
#        source(s_localhost);
#        filter(f_messages);
#        destination(d_localhost);
#};
